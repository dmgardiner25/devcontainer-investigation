# SPDX-FileCopyrightText: 2023-2024 Eduardo Robles <edu@sequentech.io>
#
# SPDX-License-Identifier: AGPL-3.0-only
################################################################################
# This is the default docker-compose profile used by the Dev Container
# https://docs.docker.com/compose/profiles/
COMPOSE_PROFILES=base
# And the project name, also for docker
COMPOSE_PROJECT_NAME=step_devcontainer
################################################################################
## Rust Build config
#
# Some Rust related build env vars below. Used only for the development
# environment. This is not relevant for production.
# We use `RUSTFLAGS=-Awarnings` in windmill etc to hide warnings during the
# builds and rebuilds that happen during development 
RUSTFLAGS=-Awarnings
CARGO_TERM_COLOR=always
# This is so that the docker builds don't affect local development. In docker,
# we use the normal target/ dir. This var is loaded by devenv.nix not by docker
# services.
CARGO_TARGET_DIR=rust-local-target
# Get full backtraces. This var is loaded by devenv.nix not by docker services.
RUST_BACKTRACE=full
################################################################################
# General AWS deployment configuration. This is used for MINIO/S3 and for AWS
# SES, AWS SNS, etc
AWS_REGION=us-east-1
################################################################################
# AWS S3 related vars. minio is compatible with AWS S3 and we use it for 
# the DevContainer development environment.
AWS_S3_ROOT_USER=minio_user
AWS_S3_ROOT_PASSWORD=minio_pass
AWS_S3_ACCESS_KEY=LZAw7hwBziRjwAhfP6Xi
AWS_S3_ACCESS_SECRET=4x8krlfXgEquxp9KhlCrCdkrECrszGQQlJa5nGct
# Don't set these two for production - we'll just use default AWS URIs instead
AWS_S3_PRIVATE_URI=http://minio:9000
AWS_S3_PUBLIC_URI=http://127.0.0.1:9000
AWS_S3_BUCKET=election-event-documents
AWS_S3_PUBLIC_BUCKET=public
AWS_S3_UPLOAD_EXPIRATION_SECS="120"
AWS_S3_FETCH_EXPIRATION_SECS="3600"
# Max upload file size. Defaulting to 10MiB = 10*1024*1024 = 10_485_760
AWS_S3_MAX_UPLOAD_BYTES="10485760"
# Cache policy for jwks files in S3.
AWS_S3_JWKS_CACHE_POLICY="max-age=30"
################################################################################
# harvest specific configuration
HARVEST_PORT="8400"
################################################################################
# This is the endpoint to connect to hasura
HASURA_ENDPOINT=http://graphql-engine:8080/v1/graphql
HASURA_PG_PASSWORD=postgrespassword
HASURA_PG_USER=postgres
HASURA_PG_PORT="5432"
HASURA_PG_DBNAME="postgres"
HASURA_PG_HOST="postgres"
# postgres database to store Hasura metadata
HASURA_GRAPHQL_METADATA_DATABASE_URL="postgres://${HASURA_PG_USER}:${HASURA_PG_PASSWORD}@${HASURA_PG_HOST}:${HASURA_PG_PORT}/${HASURA_PG_DBNAME}"
# this env var can be used to add the above postgres database to Hasura
# as a data source. this can be removed/updated based on your needs
HASURA_PG_DATABASE_URL="postgres://${HASURA_PG_USER}:${HASURA_PG_PASSWORD}@${HASURA_PG_HOST}:${HASURA_PG_PORT}/${HASURA_PG_DBNAME}"
## enable the console served by server
HASURA_GRAPHQL_ENABLE_CONSOLE="true"
## enable debugging mode. It is recommended to disable this in production
HASURA_GRAPHQL_DEV_MODE="true"
# https://hasura.io/docs/latest/deployment/graphql-engine-flags/config-examples/#console-assets-on-server
## to run console offline (i.e load console assets from server instead of CDN)
HASURA_GRAPHQL_CONSOLE_ASSETS_DIR="/srv/console-assets"
HASURA_GRAPHQL_ENABLED_LOG_TYPES="startup, http-log, webhook-log, websocket-log, query-log"
HASURA_GRAPHQL_METADATA_DEFAULTS='{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
# keycloak jwks endpoint
HASURA_GRAPHQL_JWT_SECRET='{"jwk_url": "http://minio:9000/public/certs.json"}'
# Used by Hasura action to point to harvest
HARVEST_DOMAIN="harvest:${HARVEST_PORT}"
################################################################################
# Information related to connection to immudb
IMMUDB_USER=immudb
IMMUDB_PASSWORD=immudb
IMMUDB_LOGS_DB=defaultdb
IMMUDB_HOST=immudb
IMMUDB_PORT=3322
IMMUDB_SERVER_URL="http://${IMMUDB_HOST}:${IMMUDB_PORT}"
# We need an initial index db
IMMUDB_INDEX_DB=indexdb
IMMUDB_BOARD_DB_NAME=33f18502a67c48538333a58630663559
################################################################################
# trustee/braid configuration
TRUSTEE1_CONFIG=/opt/braid/trustee1.toml
TRUSTEE2_CONFIG=/opt/braid/trustee2.toml
TRUSTEE3_CONFIG=/opt/braid/trustee3.toml
IGNORE_BOARDS=tenanttest,tenant90505c8a23a94cdfa26b4e19f6a097d5eventda4f7c9afd044da2a3afb032e80c1d7c
################################################################################
# Information related to the AWS Secrets Manager or Vault. We will migrate to
# support both Vault or AWS Secret manager soon.
# Defines the SECRETS Backend to use.
# Allowed values:
# - "HashiCorpVault" for Hashicorp Vault
# - "AwsSecretManager" for AWS Secret Manager
SECRETS_BACKEND=HashiCorpVault
# Only used when SECRETS_BACKEND=AwsSecretManager
# Prefix of all the keys used by the AWS Secret Manager. 
# Rationale: Each AWS Region share the same AWS Secret Manager Key space, even
# among different deployments. To easily seggregate keys for different 
# environments, we use a key prefix.
AWS_SM_KEY_PREFIX=development_environment_name_
# Only used when SECRETS_BACKEND=HashiCorpVault
# Points to the Hashicorp Vault server URL
VAULT_SERVER_URL=http://vault:8201
# Only used when SECRETS_BACKEND=HashiCorpVault
# Hashicorp Vault Token
VAULT_TOKEN=
################################################################################
# RabbitMQ configuration
# These two default user and password variables is used for configuring the
# default users in the rabbitmq service, so it's devenv-only
RABBITMQ_DEFAULT_USER=guest
RABBITMQ_DEFAULT_PASS=guest
# This is the AMQP variable to post or read message into or from rabbitmq
AMQP_ADDR=amqp://rabbitmq:5672
################################################################################
# Keycloak related vars
# Keycloak Base URL
KEYCLOAK_URL=http://keycloak:8090
KC_HOSTNAME="127.0.0.1"
KC_HOSTNAME_STRICT="false"
KC_HTTP_PORT="8090"
KC_DB_USERNAME=postgres
KC_DB_PASSWORD=postgrespassword
KC_DB_SCHEMA=public
KC_DB_URL_HOST=postgres-keycloak
KC_DB_URL_PORT=5432
KC_DB_URL_DATABASE=postgres
KC_OTP_RESEND_INTERVAL="60"
# Please note `KC_DB` is the DB vendor, i.e. the type of db. Postgres in this
# case:
KC_DB=postgres
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=admin
# Client Id and secret used for the authentication flow
KEYCLOAK_CLIENT_ID=service-account
KEYCLOAK_CLIENT_SECRET=zh0GWEjbynXJDcpF1YipFXUleEKTQiO0
# Client Id and secret used for administrative tasks like creating a new realm
# or similar
KEYCLOAK_ADMIN_CLIENT_ID=admin
KEYCLOAK_ADMIN_CLIENT_SECRET=admin
# Path to the default configuration file when creating a new realm related to an
# election event. For production, this can be coming from a mounted volume, so
# that it can be changed without requiring a new OCI/Docker image.
KEYCLOAK_ELECTION_EVENT_REALM_CONFIG_PATH=/import/tenant-90505c8a-23a9-4cdf-a26b-4e19f6a097d5-event-33f18502-a67c-4853-8333-a58630663559.json
# Path to the default configuration file when creating a new realm related to
# a tenant. For production, this can be coming from a mounted volume, so that
# it can be changed without requiring a new OCI/Docker image.
KEYCLOAK_TENANT_REALM_CONFIG_PATH=/import/tenant-90505c8a-23a9-4cdf-a26b-4e19f6a097d5.json
# This is the super-admin keycloak realm (and tenant id). When you login into
# the admin portal, you actually login to this Keycloak realm.
SUPER_ADMIN_TENANT_ID=90505c8a-23a9-4cdf-a26b-4e19f6a097d5
MAX_DIFF_LINES=500
# This is the name of the keycloak group voters need to be included in
KEYCLOAK_VOTER_GROUP_NAME=voter
################################################################################
# Configuration related to rust-based services. Basically, since we use Rocket
# ( see https://rocket.rs/ ), we can use these variable to configure the default
# address and port used to serve for these services (windmill, harvest, etc).
ROCKET_ADDRESS=0.0.0.0
# Log level for rust based services
LOG_LEVEL=info
# Windmill (and in the future also Harvest and Beat) need to directly connect to
# the databases. Right now it's only Keycloak DB, but in the future also to
# Hasura database directly. The configuration below is related to these
# connection settings.
#
# We're configuring the KEYCLOAK_DB object that has the type
# `deadpool_postgres::Config` using the `config` crate that allows us to parse
# configuration from environment variables. More information in the links below:
# - deadpool_postgres::Config:
#   https://docs.rs/deadpool-postgres/0.11.0/deadpool_postgres/struct.Config.html
# - config crate: https://crates.io/crates/config
#
# NOTE: that we cannot directly use a postgres:// connection string because it's
# not yet implemented by deadpool-postgres, for more info see the ticket below:
# https://github.com/bikeshedder/deadpool/issues/261
KEYCLOAK_DB__USER=${KC_DB_USERNAME}
KEYCLOAK_DB__PASSWORD=${KC_DB_PASSWORD}
KEYCLOAK_DB__HOST=${KC_DB_URL_HOST}
KEYCLOAK_DB__PORT=${KC_DB_URL_PORT}
KEYCLOAK_DB__DBNAME=${KC_DB_URL_DATABASE}
KEYCLOAK_DB__MANAGER__RECYCLING_METHOD=Verified
# Now we configure Hasura Db in the same manner as Keycloak Db:
HASURA_DB__USER=${HASURA_PG_USER}
HASURA_DB__PASSWORD=${HASURA_PG_PASSWORD}
HASURA_DB__HOST=${HASURA_PG_HOST}
HASURA_DB__PORT=${HASURA_PG_PORT}
HASURA_DB__DBNAME=${HASURA_PG_DBNAME}
HASURA_DB__MANAGER__RECYCLING_METHOD=Verified
LOW_SQL_LIMIT="1000"
DEFAULT_SQL_LIMIT="20"
DEFAULT_SQL_BATCH_SIZE="1000"
################################################################################
# This is the base url of the voting portal. This is used by windmill when
# generating urls for voters to vote during the sending of messages to voters
VOTING_PORTAL_URL=http://localhost:3000
################################################################################
# Configuration related to communications sent to voters, used by windmill.
# Variable used to configure the transport to use for sending emails.
# Allowed values:
# - "Console" which prints the email in the console log
# - "AwsSes" which sends the email using AWS SES
EMAIL_TRANSPORT_NAME=Console
# FROM address used when sending emails
EMAIL_FROM=info@sequentech.io
# Variable used to configure the transport to use for sending SMS messages.
# Allowed values:
# - "Console" which prints the email in the console log
# - "AwsSns" which sends the email using AWS SNS
SMS_TRANSPORT_NAME=Console
# JSON Configuration for AWS SNS. For example you can configure the SenderID. We
# Only support String kind of attributes.
# More information here: https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html#sms_publish_sdk
AWS_SNS_ATTRIBUTES='{"SenderID": "SEQUENT", "SMSType": "TRANSACTIONAL"}'
# Public Assets that gets uploaded on minio / s3 bucket
# Usecase: print vote receipt to PDF, etc
PUBLIC_ASSETS_PATH="public-assets"
PUBLIC_ASSETS_LOGO_IMG="sequent-logo.svg"
PUBLIC_ASSETS_QRCODE_LIB="qrcode.min.js"
PUBLIC_ASSETS_VOTE_RECEIPT_TEMPLATE="vote_receipt.hbs"
PUBLIC_ASSETS_VOTE_RECEIPT_TEMPLATE_CONTENT="vote_receipt_content.hbs"
PUBLIC_ASSETS_VELVET_VOTE_RECEIPTS_TEMPLATE="velvet_vote_receipts.hbs"
PUBLIC_ASSETS_EML_BASE_TEMPLATE="eml_base.hbs"
VOTE_RECEIPT_TEMPLATE_TITLE="Vote receipt - Sequentech"
VELVET_VOTE_RECEIPTS_TEMPLATE_TITLE="Vote receipts - Sequentech"
# uuids are replaced when you create or import an Election Event. This parameter
# allows you to avoid replacing certain uuids.
ELECTION_EVENT_FIXED_UUIDS=""
################################################################################
# Probe connection and path settings
IMMUDB_LOG_AUDIT_PROBE_ADDR=0.0.0.0:3030
IMMUDB_LOG_AUDIT_PROBE_LIVE_PATH=live
HARVEST_PROBE_ADDR=0.0.0.0:3030
HARVEST_PROBE_LIVE_PATH=live
HARVEST_PROBE_READY_PATH=ready
WINDMILL_PROBE_ADDR=0.0.0.0:3030
WINDMILL_PROBE_LIVE_PATH=live
WINDMILL_PROBE_READY_PATH=ready
BEAT_PROBE_ADDR=0.0.0.0:3030
BEAT_PROBE_LIVE_PATH=live
BEAT_PROBE_READY_PATH=ready
# Demo key
DEMO_PUBLIC_KEY=
#Voting portal countdwon policy default values
SECONDS_TO_SHOW_COUNTDOWN=60
SECONDS_TO_SHOW_ALRET=300
# CLI Usage
KEYCLOAK_CLI_CLIENT_ID=admin-portal
KEYCLOAK_CLI_CLIENT_SECRET=
# CLI Usage
KEYCLOAK_CLI_CLIENT_ID=admin-portal
KEYCLOAK_CLI_CLIENT_SECRET=
LOCAL_WORKSPACE_FOLDER=/Users/felixrobles/workspace/devcontainer/.devcontainer/scripts/..
